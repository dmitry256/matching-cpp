// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared.proto

#ifndef PROTOBUF_INCLUDED_shared_2eproto
#define PROTOBUF_INCLUDED_shared_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_shared_2eproto 

namespace protobuf_shared_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_shared_2eproto
namespace proto {
class MarketRequestProto;
class MarketRequestProtoDefaultTypeInternal;
extern MarketRequestProtoDefaultTypeInternal _MarketRequestProto_default_instance_;
class PricePointProto;
class PricePointProtoDefaultTypeInternal;
extern PricePointProtoDefaultTypeInternal _PricePointProto_default_instance_;
class SpreadProto;
class SpreadProtoDefaultTypeInternal;
extern SpreadProtoDefaultTypeInternal _SpreadProto_default_instance_;
class UUID;
class UUIDDefaultTypeInternal;
extern UUIDDefaultTypeInternal _UUID_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::MarketRequestProto* Arena::CreateMaybeMessage<::proto::MarketRequestProto>(Arena*);
template<> ::proto::PricePointProto* Arena::CreateMaybeMessage<::proto::PricePointProto>(Arena*);
template<> ::proto::SpreadProto* Arena::CreateMaybeMessage<::proto::SpreadProto>(Arena*);
template<> ::proto::UUID* Arena::CreateMaybeMessage<::proto::UUID>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {

enum MarketSideProto {
  BID = 0,
  ASK = 1,
  MarketSideProto_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MarketSideProto_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MarketSideProto_IsValid(int value);
const MarketSideProto MarketSideProto_MIN = BID;
const MarketSideProto MarketSideProto_MAX = ASK;
const int MarketSideProto_ARRAYSIZE = MarketSideProto_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarketSideProto_descriptor();
inline const ::std::string& MarketSideProto_Name(MarketSideProto value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarketSideProto_descriptor(), value);
}
inline bool MarketSideProto_Parse(
    const ::std::string& name, MarketSideProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarketSideProto>(
    MarketSideProto_descriptor(), name, value);
}
// ===================================================================

class MarketRequestProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MarketRequestProto) */ {
 public:
  MarketRequestProto();
  virtual ~MarketRequestProto();

  MarketRequestProto(const MarketRequestProto& from);

  inline MarketRequestProto& operator=(const MarketRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarketRequestProto(MarketRequestProto&& from) noexcept
    : MarketRequestProto() {
    *this = ::std::move(from);
  }

  inline MarketRequestProto& operator=(MarketRequestProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketRequestProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketRequestProto* internal_default_instance() {
    return reinterpret_cast<const MarketRequestProto*>(
               &_MarketRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MarketRequestProto* other);
  friend void swap(MarketRequestProto& a, MarketRequestProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketRequestProto* New() const final {
    return CreateMaybeMessage<MarketRequestProto>(NULL);
  }

  MarketRequestProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarketRequestProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarketRequestProto& from);
  void MergeFrom(const MarketRequestProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketRequestProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string market = 1;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  const ::std::string& market() const;
  void set_market(const ::std::string& value);
  #if LANG_CXX11
  void set_market(::std::string&& value);
  #endif
  void set_market(const char* value);
  void set_market(const char* value, size_t size);
  ::std::string* mutable_market();
  ::std::string* release_market();
  void set_allocated_market(::std::string* market);

  // @@protoc_insertion_point(class_scope:proto.MarketRequestProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr market_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PricePointProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PricePointProto) */ {
 public:
  PricePointProto();
  virtual ~PricePointProto();

  PricePointProto(const PricePointProto& from);

  inline PricePointProto& operator=(const PricePointProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PricePointProto(PricePointProto&& from) noexcept
    : PricePointProto() {
    *this = ::std::move(from);
  }

  inline PricePointProto& operator=(PricePointProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PricePointProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PricePointProto* internal_default_instance() {
    return reinterpret_cast<const PricePointProto*>(
               &_PricePointProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PricePointProto* other);
  friend void swap(PricePointProto& a, PricePointProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PricePointProto* New() const final {
    return CreateMaybeMessage<PricePointProto>(NULL);
  }

  PricePointProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PricePointProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PricePointProto& from);
  void MergeFrom(const PricePointProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PricePointProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 price = 1;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  ::google::protobuf::uint64 price() const;
  void set_price(::google::protobuf::uint64 value);

  // uint64 depth = 2;
  void clear_depth();
  static const int kDepthFieldNumber = 2;
  ::google::protobuf::uint64 depth() const;
  void set_depth(::google::protobuf::uint64 value);

  // .proto.MarketSideProto side = 3;
  void clear_side();
  static const int kSideFieldNumber = 3;
  ::proto::MarketSideProto side() const;
  void set_side(::proto::MarketSideProto value);

  // @@protoc_insertion_point(class_scope:proto.PricePointProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 price_;
  ::google::protobuf::uint64 depth_;
  int side_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpreadProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SpreadProto) */ {
 public:
  SpreadProto();
  virtual ~SpreadProto();

  SpreadProto(const SpreadProto& from);

  inline SpreadProto& operator=(const SpreadProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpreadProto(SpreadProto&& from) noexcept
    : SpreadProto() {
    *this = ::std::move(from);
  }

  inline SpreadProto& operator=(SpreadProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpreadProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpreadProto* internal_default_instance() {
    return reinterpret_cast<const SpreadProto*>(
               &_SpreadProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SpreadProto* other);
  friend void swap(SpreadProto& a, SpreadProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpreadProto* New() const final {
    return CreateMaybeMessage<SpreadProto>(NULL);
  }

  SpreadProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpreadProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpreadProto& from);
  void MergeFrom(const SpreadProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpreadProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float spread = 1;
  void clear_spread();
  static const int kSpreadFieldNumber = 1;
  float spread() const;
  void set_spread(float value);

  // @@protoc_insertion_point(class_scope:proto.SpreadProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float spread_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UUID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.UUID) */ {
 public:
  UUID();
  virtual ~UUID();

  UUID(const UUID& from);

  inline UUID& operator=(const UUID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UUID(UUID&& from) noexcept
    : UUID() {
    *this = ::std::move(from);
  }

  inline UUID& operator=(UUID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UUID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UUID* internal_default_instance() {
    return reinterpret_cast<const UUID*>(
               &_UUID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UUID* other);
  friend void swap(UUID& a, UUID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UUID* New() const final {
    return CreateMaybeMessage<UUID>(NULL);
  }

  UUID* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UUID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UUID& from);
  void MergeFrom(const UUID& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string UUID = 1;
  void clear_uuid();
  static const int kUUIDFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:proto.UUID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MarketRequestProto

// string market = 1;
inline void MarketRequestProto::clear_market() {
  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketRequestProto::market() const {
  // @@protoc_insertion_point(field_get:proto.MarketRequestProto.market)
  return market_.GetNoArena();
}
inline void MarketRequestProto::set_market(const ::std::string& value) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.MarketRequestProto.market)
}
#if LANG_CXX11
inline void MarketRequestProto::set_market(::std::string&& value) {
  
  market_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MarketRequestProto.market)
}
#endif
inline void MarketRequestProto::set_market(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MarketRequestProto.market)
}
inline void MarketRequestProto::set_market(const char* value, size_t size) {
  
  market_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MarketRequestProto.market)
}
inline ::std::string* MarketRequestProto::mutable_market() {
  
  // @@protoc_insertion_point(field_mutable:proto.MarketRequestProto.market)
  return market_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketRequestProto::release_market() {
  // @@protoc_insertion_point(field_release:proto.MarketRequestProto.market)
  
  return market_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketRequestProto::set_allocated_market(::std::string* market) {
  if (market != NULL) {
    
  } else {
    
  }
  market_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), market);
  // @@protoc_insertion_point(field_set_allocated:proto.MarketRequestProto.market)
}

// -------------------------------------------------------------------

// PricePointProto

// uint64 price = 1;
inline void PricePointProto::clear_price() {
  price_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PricePointProto::price() const {
  // @@protoc_insertion_point(field_get:proto.PricePointProto.price)
  return price_;
}
inline void PricePointProto::set_price(::google::protobuf::uint64 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:proto.PricePointProto.price)
}

// uint64 depth = 2;
inline void PricePointProto::clear_depth() {
  depth_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PricePointProto::depth() const {
  // @@protoc_insertion_point(field_get:proto.PricePointProto.depth)
  return depth_;
}
inline void PricePointProto::set_depth(::google::protobuf::uint64 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:proto.PricePointProto.depth)
}

// .proto.MarketSideProto side = 3;
inline void PricePointProto::clear_side() {
  side_ = 0;
}
inline ::proto::MarketSideProto PricePointProto::side() const {
  // @@protoc_insertion_point(field_get:proto.PricePointProto.side)
  return static_cast< ::proto::MarketSideProto >(side_);
}
inline void PricePointProto::set_side(::proto::MarketSideProto value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:proto.PricePointProto.side)
}

// -------------------------------------------------------------------

// SpreadProto

// float spread = 1;
inline void SpreadProto::clear_spread() {
  spread_ = 0;
}
inline float SpreadProto::spread() const {
  // @@protoc_insertion_point(field_get:proto.SpreadProto.spread)
  return spread_;
}
inline void SpreadProto::set_spread(float value) {
  
  spread_ = value;
  // @@protoc_insertion_point(field_set:proto.SpreadProto.spread)
}

// -------------------------------------------------------------------

// UUID

// string UUID = 1;
inline void UUID::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UUID::uuid() const {
  // @@protoc_insertion_point(field_get:proto.UUID.UUID)
  return uuid_.GetNoArena();
}
inline void UUID::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UUID.UUID)
}
#if LANG_CXX11
inline void UUID::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UUID.UUID)
}
#endif
inline void UUID::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UUID.UUID)
}
inline void UUID::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UUID.UUID)
}
inline ::std::string* UUID::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:proto.UUID.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UUID::release_uuid() {
  // @@protoc_insertion_point(field_release:proto.UUID.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UUID::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:proto.UUID.UUID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::MarketSideProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MarketSideProto>() {
  return ::proto::MarketSideProto_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_shared_2eproto
