// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#include "order.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_shared_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_shared_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UUID;
}  // namespace protobuf_shared_2eproto
namespace proto {
class OrderProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderProto>
      _instance;
} _OrderProto_default_instance_;
}  // namespace proto
namespace protobuf_order_2eproto {
static void InitDefaultsOrderProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_OrderProto_default_instance_;
    new (ptr) ::proto::OrderProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::OrderProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderProto}, {
      &protobuf_shared_2eproto::scc_info_UUID.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OrderProto.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, author_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, executed_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, tif_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, created_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, updated_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::OrderProto, expiration_timestamp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::OrderProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_OrderProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "order.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013order.proto\022\005proto\032\014shared.proto\"\257\005\n\nO"
      "rderProto\022\035\n\010order_id\030\001 \001(\0132\013.proto.UUID"
      "\022\036\n\tauthor_id\030\002 \001(\0132\013.proto.UUID\022\016\n\006mark"
      "et\030\003 \001(\t\022$\n\004side\030\004 \001(\0162\026.proto.MarketSid"
      "eProto\022\r\n\005price\030\005 \001(\004\022\014\n\004size\030\006 \001(\004\022\027\n\017e"
      "xecuted_amount\030\007 \001(\004\022)\n\004type\030\010 \001(\0162\033.pro"
      "to.OrderProto.TypeProto\022/\n\003tif\030\t \001(\0162\".p"
      "roto.OrderProto.TimeInForceProto\022+\n\005stat"
      "e\030\n \001(\0162\034.proto.OrderProto.StateProto\022\031\n"
      "\021created_timestamp\030\013 \001(\t\022\031\n\021updated_time"
      "stamp\030\014 \001(\t\022\034\n\024expiration_timestamp\030\r \001("
      "\t\"`\n\nStateProto\022\007\n\003NEW\020\000\022\024\n\020PARTIALLY_FI"
      "LLED\020\001\022\n\n\006FILLED\020\002\022\014\n\010CANCELED\020\003\022\014\n\010REJE"
      "CTED\020\004\022\013\n\007EXPIRED\020\005\"\177\n\tTypeProto\022\t\n\005LIMI"
      "T\020\000\022\n\n\006MARKET\020\001\022\r\n\tSTOP_LOSS\020\002\022\023\n\017STOP_L"
      "OSS_LIMIT\020\003\022\017\n\013TAKE_PROFIT\020\004\022\025\n\021TAKE_PRO"
      "FIT_LIMIT\020\005\022\017\n\013LIMIT_MAKER\020\006\"6\n\020TimeInFo"
      "rceProto\022\007\n\003GFD\020\000\022\007\n\003GTC\020\001\022\007\n\003IOC\020\002\022\007\n\003F"
      "OC\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 732);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "order.proto", &protobuf_RegisterTypes);
  ::protobuf_shared_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_order_2eproto
namespace proto {
const ::google::protobuf::EnumDescriptor* OrderProto_StateProto_descriptor() {
  protobuf_order_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_order_2eproto::file_level_enum_descriptors[0];
}
bool OrderProto_StateProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OrderProto_StateProto OrderProto::NEW;
const OrderProto_StateProto OrderProto::PARTIALLY_FILLED;
const OrderProto_StateProto OrderProto::FILLED;
const OrderProto_StateProto OrderProto::CANCELED;
const OrderProto_StateProto OrderProto::REJECTED;
const OrderProto_StateProto OrderProto::EXPIRED;
const OrderProto_StateProto OrderProto::StateProto_MIN;
const OrderProto_StateProto OrderProto::StateProto_MAX;
const int OrderProto::StateProto_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OrderProto_TypeProto_descriptor() {
  protobuf_order_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_order_2eproto::file_level_enum_descriptors[1];
}
bool OrderProto_TypeProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OrderProto_TypeProto OrderProto::LIMIT;
const OrderProto_TypeProto OrderProto::MARKET;
const OrderProto_TypeProto OrderProto::STOP_LOSS;
const OrderProto_TypeProto OrderProto::STOP_LOSS_LIMIT;
const OrderProto_TypeProto OrderProto::TAKE_PROFIT;
const OrderProto_TypeProto OrderProto::TAKE_PROFIT_LIMIT;
const OrderProto_TypeProto OrderProto::LIMIT_MAKER;
const OrderProto_TypeProto OrderProto::TypeProto_MIN;
const OrderProto_TypeProto OrderProto::TypeProto_MAX;
const int OrderProto::TypeProto_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OrderProto_TimeInForceProto_descriptor() {
  protobuf_order_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_order_2eproto::file_level_enum_descriptors[2];
}
bool OrderProto_TimeInForceProto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OrderProto_TimeInForceProto OrderProto::GFD;
const OrderProto_TimeInForceProto OrderProto::GTC;
const OrderProto_TimeInForceProto OrderProto::IOC;
const OrderProto_TimeInForceProto OrderProto::FOC;
const OrderProto_TimeInForceProto OrderProto::TimeInForceProto_MIN;
const OrderProto_TimeInForceProto OrderProto::TimeInForceProto_MAX;
const int OrderProto::TimeInForceProto_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void OrderProto::InitAsDefaultInstance() {
  ::proto::_OrderProto_default_instance_._instance.get_mutable()->order_id_ = const_cast< ::proto::UUID*>(
      ::proto::UUID::internal_default_instance());
  ::proto::_OrderProto_default_instance_._instance.get_mutable()->author_id_ = const_cast< ::proto::UUID*>(
      ::proto::UUID::internal_default_instance());
}
void OrderProto::clear_order_id() {
  if (GetArenaNoVirtual() == NULL && order_id_ != NULL) {
    delete order_id_;
  }
  order_id_ = NULL;
}
void OrderProto::clear_author_id() {
  if (GetArenaNoVirtual() == NULL && author_id_ != NULL) {
    delete author_id_;
  }
  author_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderProto::kOrderIdFieldNumber;
const int OrderProto::kAuthorIdFieldNumber;
const int OrderProto::kMarketFieldNumber;
const int OrderProto::kSideFieldNumber;
const int OrderProto::kPriceFieldNumber;
const int OrderProto::kSizeFieldNumber;
const int OrderProto::kExecutedAmountFieldNumber;
const int OrderProto::kTypeFieldNumber;
const int OrderProto::kTifFieldNumber;
const int OrderProto::kStateFieldNumber;
const int OrderProto::kCreatedTimestampFieldNumber;
const int OrderProto::kUpdatedTimestampFieldNumber;
const int OrderProto::kExpirationTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderProto::OrderProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_order_2eproto::scc_info_OrderProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.OrderProto)
}
OrderProto::OrderProto(const OrderProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  market_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.market().size() > 0) {
    market_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  created_timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.created_timestamp().size() > 0) {
    created_timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.created_timestamp_);
  }
  updated_timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.updated_timestamp().size() > 0) {
    updated_timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updated_timestamp_);
  }
  expiration_timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expiration_timestamp().size() > 0) {
    expiration_timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expiration_timestamp_);
  }
  if (from.has_order_id()) {
    order_id_ = new ::proto::UUID(*from.order_id_);
  } else {
    order_id_ = NULL;
  }
  if (from.has_author_id()) {
    author_id_ = new ::proto::UUID(*from.author_id_);
  } else {
    author_id_ = NULL;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&price_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:proto.OrderProto)
}

void OrderProto::SharedCtor() {
  market_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updated_timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiration_timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&order_id_)) + sizeof(state_));
}

OrderProto::~OrderProto() {
  // @@protoc_insertion_point(destructor:proto.OrderProto)
  SharedDtor();
}

void OrderProto::SharedDtor() {
  market_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updated_timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiration_timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_id_;
  if (this != internal_default_instance()) delete author_id_;
}

void OrderProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OrderProto::descriptor() {
  ::protobuf_order_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_order_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderProto& OrderProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_order_2eproto::scc_info_OrderProto.base);
  return *internal_default_instance();
}


void OrderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.OrderProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updated_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiration_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && order_id_ != NULL) {
    delete order_id_;
  }
  order_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && author_id_ != NULL) {
    delete author_id_;
  }
  author_id_ = NULL;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&price_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool OrderProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.OrderProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.UUID order_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UUID author_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_author_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string market = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->market().data(), static_cast<int>(this->market().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.OrderProto.market"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MarketSideProto side = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::proto::MarketSideProto >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 executed_amount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &executed_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.OrderProto.TypeProto type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::OrderProto_TypeProto >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.OrderProto.TimeInForceProto tif = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tif(static_cast< ::proto::OrderProto_TimeInForceProto >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.OrderProto.StateProto state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::proto::OrderProto_StateProto >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string created_timestamp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_created_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->created_timestamp().data(), static_cast<int>(this->created_timestamp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.OrderProto.created_timestamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string updated_timestamp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->updated_timestamp().data(), static_cast<int>(this->updated_timestamp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.OrderProto.updated_timestamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expiration_timestamp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expiration_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expiration_timestamp().data(), static_cast<int>(this->expiration_timestamp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.OrderProto.expiration_timestamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.OrderProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.OrderProto)
  return false;
#undef DO_
}

void OrderProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.OrderProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UUID order_id = 1;
  if (this->has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_order_id(), output);
  }

  // .proto.UUID author_id = 2;
  if (this->has_author_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_author_id(), output);
  }

  // string market = 3;
  if (this->market().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market().data(), static_cast<int>(this->market().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OrderProto.market");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->market(), output);
  }

  // .proto.MarketSideProto side = 4;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->side(), output);
  }

  // uint64 price = 5;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->price(), output);
  }

  // uint64 size = 6;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->size(), output);
  }

  // uint64 executed_amount = 7;
  if (this->executed_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->executed_amount(), output);
  }

  // .proto.OrderProto.TypeProto type = 8;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  // .proto.OrderProto.TimeInForceProto tif = 9;
  if (this->tif() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->tif(), output);
  }

  // .proto.OrderProto.StateProto state = 10;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->state(), output);
  }

  // string created_timestamp = 11;
  if (this->created_timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->created_timestamp().data(), static_cast<int>(this->created_timestamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OrderProto.created_timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->created_timestamp(), output);
  }

  // string updated_timestamp = 12;
  if (this->updated_timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->updated_timestamp().data(), static_cast<int>(this->updated_timestamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OrderProto.updated_timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->updated_timestamp(), output);
  }

  // string expiration_timestamp = 13;
  if (this->expiration_timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expiration_timestamp().data(), static_cast<int>(this->expiration_timestamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OrderProto.expiration_timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->expiration_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.OrderProto)
}

::google::protobuf::uint8* OrderProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.OrderProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UUID order_id = 1;
  if (this->has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_order_id(), deterministic, target);
  }

  // .proto.UUID author_id = 2;
  if (this->has_author_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_author_id(), deterministic, target);
  }

  // string market = 3;
  if (this->market().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market().data(), static_cast<int>(this->market().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OrderProto.market");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->market(), target);
  }

  // .proto.MarketSideProto side = 4;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->side(), target);
  }

  // uint64 price = 5;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->price(), target);
  }

  // uint64 size = 6;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->size(), target);
  }

  // uint64 executed_amount = 7;
  if (this->executed_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->executed_amount(), target);
  }

  // .proto.OrderProto.TypeProto type = 8;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->type(), target);
  }

  // .proto.OrderProto.TimeInForceProto tif = 9;
  if (this->tif() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->tif(), target);
  }

  // .proto.OrderProto.StateProto state = 10;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->state(), target);
  }

  // string created_timestamp = 11;
  if (this->created_timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->created_timestamp().data(), static_cast<int>(this->created_timestamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OrderProto.created_timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->created_timestamp(), target);
  }

  // string updated_timestamp = 12;
  if (this->updated_timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->updated_timestamp().data(), static_cast<int>(this->updated_timestamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OrderProto.updated_timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->updated_timestamp(), target);
  }

  // string expiration_timestamp = 13;
  if (this->expiration_timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expiration_timestamp().data(), static_cast<int>(this->expiration_timestamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.OrderProto.expiration_timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->expiration_timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.OrderProto)
  return target;
}

size_t OrderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.OrderProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string market = 3;
  if (this->market().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->market());
  }

  // string created_timestamp = 11;
  if (this->created_timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->created_timestamp());
  }

  // string updated_timestamp = 12;
  if (this->updated_timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->updated_timestamp());
  }

  // string expiration_timestamp = 13;
  if (this->expiration_timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expiration_timestamp());
  }

  // .proto.UUID order_id = 1;
  if (this->has_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_id_);
  }

  // .proto.UUID author_id = 2;
  if (this->has_author_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *author_id_);
  }

  // uint64 price = 5;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->price());
  }

  // uint64 size = 6;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // .proto.MarketSideProto side = 4;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // .proto.OrderProto.TypeProto type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint64 executed_amount = 7;
  if (this->executed_amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->executed_amount());
  }

  // .proto.OrderProto.TimeInForceProto tif = 9;
  if (this->tif() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tif());
  }

  // .proto.OrderProto.StateProto state = 10;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.OrderProto)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.OrderProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.OrderProto)
    MergeFrom(*source);
  }
}

void OrderProto::MergeFrom(const OrderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.OrderProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.market().size() > 0) {

    market_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.market_);
  }
  if (from.created_timestamp().size() > 0) {

    created_timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.created_timestamp_);
  }
  if (from.updated_timestamp().size() > 0) {

    updated_timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updated_timestamp_);
  }
  if (from.expiration_timestamp().size() > 0) {

    expiration_timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expiration_timestamp_);
  }
  if (from.has_order_id()) {
    mutable_order_id()->::proto::UUID::MergeFrom(from.order_id());
  }
  if (from.has_author_id()) {
    mutable_author_id()->::proto::UUID::MergeFrom(from.author_id());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.executed_amount() != 0) {
    set_executed_amount(from.executed_amount());
  }
  if (from.tif() != 0) {
    set_tif(from.tif());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void OrderProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.OrderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderProto::CopyFrom(const OrderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.OrderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderProto::IsInitialized() const {
  return true;
}

void OrderProto::Swap(OrderProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderProto::InternalSwap(OrderProto* other) {
  using std::swap;
  market_.Swap(&other->market_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  created_timestamp_.Swap(&other->created_timestamp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  updated_timestamp_.Swap(&other->updated_timestamp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expiration_timestamp_.Swap(&other->expiration_timestamp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_id_, other->order_id_);
  swap(author_id_, other->author_id_);
  swap(price_, other->price_);
  swap(size_, other->size_);
  swap(side_, other->side_);
  swap(type_, other->type_);
  swap(executed_amount_, other->executed_amount_);
  swap(tif_, other->tif_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OrderProto::GetMetadata() const {
  protobuf_order_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_order_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::OrderProto* Arena::CreateMaybeMessage< ::proto::OrderProto >(Arena* arena) {
  return Arena::CreateInternal< ::proto::OrderProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
