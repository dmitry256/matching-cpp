// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: matcher.proto
#ifndef GRPC_matcher_2eproto__INCLUDED
#define GRPC_matcher_2eproto__INCLUDED

#include "matcher.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace proto {

class MatcherProto final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.MatcherProto";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::OrderBookProto>> GetOrderBook(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::OrderBookProto>>(GetOrderBookRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::OrderBookProto>> AsyncGetOrderBook(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::OrderBookProto>>(AsyncGetOrderBookRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::OrderBookProto>> PrepareAsyncGetOrderBook(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::OrderBookProto>>(PrepareAsyncGetOrderBookRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBestBidPrice(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::proto::PricePointProto* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::PricePointProto>> AsyncGetBestBidPrice(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::PricePointProto>>(AsyncGetBestBidPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::PricePointProto>> PrepareAsyncGetBestBidPrice(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::PricePointProto>>(PrepareAsyncGetBestBidPriceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBestAskPrice(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::proto::PricePointProto* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::PricePointProto>> AsyncGetBestAskPrice(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::PricePointProto>>(AsyncGetBestAskPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::PricePointProto>> PrepareAsyncGetBestAskPrice(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::PricePointProto>>(PrepareAsyncGetBestAskPriceRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSpread(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::proto::SpreadProto* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::SpreadProto>> AsyncGetSpread(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::SpreadProto>>(AsyncGetSpreadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::SpreadProto>> PrepareAsyncGetSpread(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::SpreadProto>>(PrepareAsyncGetSpreadRaw(context, request, cq));
    }
    virtual ::grpc::Status Lookup(::grpc::ClientContext* context, const ::proto::UUID& request, ::proto::OrderProto* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::OrderProto>> AsyncLookup(::grpc::ClientContext* context, const ::proto::UUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::OrderProto>>(AsyncLookupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::OrderProto>> PrepareAsyncLookup(::grpc::ClientContext* context, const ::proto::UUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::OrderProto>>(PrepareAsyncLookupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::OrderProto>> Execute(::grpc::ClientContext* context, const ::proto::OrderProto& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::OrderProto>>(ExecuteRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::OrderProto>> AsyncExecute(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::OrderProto>>(AsyncExecuteRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::OrderProto>> PrepareAsyncExecute(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::OrderProto>>(PrepareAsyncExecuteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::OrderProto>> Cancel(::grpc::ClientContext* context, const ::proto::OrderProto& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::OrderProto>>(CancelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::OrderProto>> AsyncCancel(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::OrderProto>>(AsyncCancelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::OrderProto>> PrepareAsyncCancel(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::OrderProto>>(PrepareAsyncCancelRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::proto::OrderBookProto>* GetOrderBookRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::OrderBookProto>* AsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::OrderBookProto>* PrepareAsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::PricePointProto>* AsyncGetBestBidPriceRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::PricePointProto>* PrepareAsyncGetBestBidPriceRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::PricePointProto>* AsyncGetBestAskPriceRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::PricePointProto>* PrepareAsyncGetBestAskPriceRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::SpreadProto>* AsyncGetSpreadRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::SpreadProto>* PrepareAsyncGetSpreadRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::OrderProto>* AsyncLookupRaw(::grpc::ClientContext* context, const ::proto::UUID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::OrderProto>* PrepareAsyncLookupRaw(::grpc::ClientContext* context, const ::proto::UUID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::proto::OrderProto>* ExecuteRaw(::grpc::ClientContext* context, const ::proto::OrderProto& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::OrderProto>* AsyncExecuteRaw(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::OrderProto>* PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::proto::OrderProto>* CancelRaw(::grpc::ClientContext* context, const ::proto::OrderProto& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::OrderProto>* AsyncCancelRaw(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::OrderProto>* PrepareAsyncCancelRaw(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::proto::OrderBookProto>> GetOrderBook(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::OrderBookProto>>(GetOrderBookRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::OrderBookProto>> AsyncGetOrderBook(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::OrderBookProto>>(AsyncGetOrderBookRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::OrderBookProto>> PrepareAsyncGetOrderBook(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::OrderBookProto>>(PrepareAsyncGetOrderBookRaw(context, request, cq));
    }
    ::grpc::Status GetBestBidPrice(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::proto::PricePointProto* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::PricePointProto>> AsyncGetBestBidPrice(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::PricePointProto>>(AsyncGetBestBidPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::PricePointProto>> PrepareAsyncGetBestBidPrice(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::PricePointProto>>(PrepareAsyncGetBestBidPriceRaw(context, request, cq));
    }
    ::grpc::Status GetBestAskPrice(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::proto::PricePointProto* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::PricePointProto>> AsyncGetBestAskPrice(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::PricePointProto>>(AsyncGetBestAskPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::PricePointProto>> PrepareAsyncGetBestAskPrice(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::PricePointProto>>(PrepareAsyncGetBestAskPriceRaw(context, request, cq));
    }
    ::grpc::Status GetSpread(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::proto::SpreadProto* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::SpreadProto>> AsyncGetSpread(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::SpreadProto>>(AsyncGetSpreadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::SpreadProto>> PrepareAsyncGetSpread(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::SpreadProto>>(PrepareAsyncGetSpreadRaw(context, request, cq));
    }
    ::grpc::Status Lookup(::grpc::ClientContext* context, const ::proto::UUID& request, ::proto::OrderProto* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::OrderProto>> AsyncLookup(::grpc::ClientContext* context, const ::proto::UUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::OrderProto>>(AsyncLookupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::OrderProto>> PrepareAsyncLookup(::grpc::ClientContext* context, const ::proto::UUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::OrderProto>>(PrepareAsyncLookupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::proto::OrderProto>> Execute(::grpc::ClientContext* context, const ::proto::OrderProto& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::OrderProto>>(ExecuteRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::OrderProto>> AsyncExecute(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::OrderProto>>(AsyncExecuteRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::OrderProto>> PrepareAsyncExecute(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::OrderProto>>(PrepareAsyncExecuteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::proto::OrderProto>> Cancel(::grpc::ClientContext* context, const ::proto::OrderProto& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::OrderProto>>(CancelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::OrderProto>> AsyncCancel(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::OrderProto>>(AsyncCancelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::OrderProto>> PrepareAsyncCancel(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::OrderProto>>(PrepareAsyncCancelRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::proto::OrderBookProto>* GetOrderBookRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request) override;
    ::grpc::ClientAsyncReader< ::proto::OrderBookProto>* AsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::OrderBookProto>* PrepareAsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::PricePointProto>* AsyncGetBestBidPriceRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::PricePointProto>* PrepareAsyncGetBestBidPriceRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::PricePointProto>* AsyncGetBestAskPriceRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::PricePointProto>* PrepareAsyncGetBestAskPriceRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::SpreadProto>* AsyncGetSpreadRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::SpreadProto>* PrepareAsyncGetSpreadRaw(::grpc::ClientContext* context, const ::proto::MarketRequestProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::OrderProto>* AsyncLookupRaw(::grpc::ClientContext* context, const ::proto::UUID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::OrderProto>* PrepareAsyncLookupRaw(::grpc::ClientContext* context, const ::proto::UUID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::proto::OrderProto>* ExecuteRaw(::grpc::ClientContext* context, const ::proto::OrderProto& request) override;
    ::grpc::ClientAsyncReader< ::proto::OrderProto>* AsyncExecuteRaw(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::OrderProto>* PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::proto::OrderProto>* CancelRaw(::grpc::ClientContext* context, const ::proto::OrderProto& request) override;
    ::grpc::ClientAsyncReader< ::proto::OrderProto>* AsyncCancelRaw(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::OrderProto>* PrepareAsyncCancelRaw(::grpc::ClientContext* context, const ::proto::OrderProto& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrderBook_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBestBidPrice_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBestAskPrice_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpread_;
    const ::grpc::internal::RpcMethod rpcmethod_Lookup_;
    const ::grpc::internal::RpcMethod rpcmethod_Execute_;
    const ::grpc::internal::RpcMethod rpcmethod_Cancel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetOrderBook(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::grpc::ServerWriter< ::proto::OrderBookProto>* writer);
    virtual ::grpc::Status GetBestBidPrice(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::proto::PricePointProto* response);
    virtual ::grpc::Status GetBestAskPrice(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::proto::PricePointProto* response);
    virtual ::grpc::Status GetSpread(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::proto::SpreadProto* response);
    virtual ::grpc::Status Lookup(::grpc::ServerContext* context, const ::proto::UUID* request, ::proto::OrderProto* response);
    virtual ::grpc::Status Execute(::grpc::ServerContext* context, const ::proto::OrderProto* request, ::grpc::ServerWriter< ::proto::OrderProto>* writer);
    virtual ::grpc::Status Cancel(::grpc::ServerContext* context, const ::proto::OrderProto* request, ::grpc::ServerWriter< ::proto::OrderProto>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::grpc::ServerWriter< ::proto::OrderBookProto>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrderBook(::grpc::ServerContext* context, ::proto::MarketRequestProto* request, ::grpc::ServerAsyncWriter< ::proto::OrderBookProto>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBestBidPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBestBidPrice() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetBestBidPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestBidPrice(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::proto::PricePointProto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBestBidPrice(::grpc::ServerContext* context, ::proto::MarketRequestProto* request, ::grpc::ServerAsyncResponseWriter< ::proto::PricePointProto>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBestAskPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBestAskPrice() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetBestAskPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestAskPrice(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::proto::PricePointProto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBestAskPrice(::grpc::ServerContext* context, ::proto::MarketRequestProto* request, ::grpc::ServerAsyncResponseWriter< ::proto::PricePointProto>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSpread() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetSpread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpread(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::proto::SpreadProto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpread(::grpc::ServerContext* context, ::proto::MarketRequestProto* request, ::grpc::ServerAsyncResponseWriter< ::proto::SpreadProto>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Lookup() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* context, const ::proto::UUID* request, ::proto::OrderProto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookup(::grpc::ServerContext* context, ::proto::UUID* request, ::grpc::ServerAsyncResponseWriter< ::proto::OrderProto>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Execute() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* context, const ::proto::OrderProto* request, ::grpc::ServerWriter< ::proto::OrderProto>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecute(::grpc::ServerContext* context, ::proto::OrderProto* request, ::grpc::ServerAsyncWriter< ::proto::OrderProto>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Cancel() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* context, const ::proto::OrderProto* request, ::grpc::ServerWriter< ::proto::OrderProto>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancel(::grpc::ServerContext* context, ::proto::OrderProto* request, ::grpc::ServerAsyncWriter< ::proto::OrderProto>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetOrderBook<WithAsyncMethod_GetBestBidPrice<WithAsyncMethod_GetBestAskPrice<WithAsyncMethod_GetSpread<WithAsyncMethod_Lookup<WithAsyncMethod_Execute<WithAsyncMethod_Cancel<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::grpc::ServerWriter< ::proto::OrderBookProto>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBestBidPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBestBidPrice() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetBestBidPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestBidPrice(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::proto::PricePointProto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBestAskPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBestAskPrice() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetBestAskPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestAskPrice(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::proto::PricePointProto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSpread() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetSpread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpread(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::proto::SpreadProto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Lookup() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* context, const ::proto::UUID* request, ::proto::OrderProto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Execute() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* context, const ::proto::OrderProto* request, ::grpc::ServerWriter< ::proto::OrderProto>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Cancel() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* context, const ::proto::OrderProto* request, ::grpc::ServerWriter< ::proto::OrderProto>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBestBidPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBestBidPrice() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::MarketRequestProto, ::proto::PricePointProto>(std::bind(&WithStreamedUnaryMethod_GetBestBidPrice<BaseClass>::StreamedGetBestBidPrice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBestBidPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBestBidPrice(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::proto::PricePointProto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBestBidPrice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::MarketRequestProto,::proto::PricePointProto>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBestAskPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBestAskPrice() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::MarketRequestProto, ::proto::PricePointProto>(std::bind(&WithStreamedUnaryMethod_GetBestAskPrice<BaseClass>::StreamedGetBestAskPrice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBestAskPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBestAskPrice(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::proto::PricePointProto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBestAskPrice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::MarketRequestProto,::proto::PricePointProto>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSpread() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::MarketRequestProto, ::proto::SpreadProto>(std::bind(&WithStreamedUnaryMethod_GetSpread<BaseClass>::StreamedGetSpread, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSpread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpread(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::proto::SpreadProto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpread(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::MarketRequestProto,::proto::SpreadProto>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Lookup() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::UUID, ::proto::OrderProto>(std::bind(&WithStreamedUnaryMethod_Lookup<BaseClass>::StreamedLookup, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* context, const ::proto::UUID* request, ::proto::OrderProto* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLookup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::UUID,::proto::OrderProto>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetBestBidPrice<WithStreamedUnaryMethod_GetBestAskPrice<WithStreamedUnaryMethod_GetSpread<WithStreamedUnaryMethod_Lookup<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetOrderBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetOrderBook() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::proto::MarketRequestProto, ::proto::OrderBookProto>(std::bind(&WithSplitStreamingMethod_GetOrderBook<BaseClass>::StreamedGetOrderBook, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetOrderBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrderBook(::grpc::ServerContext* context, const ::proto::MarketRequestProto* request, ::grpc::ServerWriter< ::proto::OrderBookProto>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetOrderBook(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::MarketRequestProto,::proto::OrderBookProto>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Execute() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler< ::proto::OrderProto, ::proto::OrderProto>(std::bind(&WithSplitStreamingMethod_Execute<BaseClass>::StreamedExecute, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Execute(::grpc::ServerContext* context, const ::proto::OrderProto* request, ::grpc::ServerWriter< ::proto::OrderProto>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedExecute(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::OrderProto,::proto::OrderProto>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Cancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Cancel() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler< ::proto::OrderProto, ::proto::OrderProto>(std::bind(&WithSplitStreamingMethod_Cancel<BaseClass>::StreamedCancel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Cancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Cancel(::grpc::ServerContext* context, const ::proto::OrderProto* request, ::grpc::ServerWriter< ::proto::OrderProto>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedCancel(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::OrderProto,::proto::OrderProto>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetOrderBook<WithSplitStreamingMethod_Execute<WithSplitStreamingMethod_Cancel<Service > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetOrderBook<WithStreamedUnaryMethod_GetBestBidPrice<WithStreamedUnaryMethod_GetBestAskPrice<WithStreamedUnaryMethod_GetSpread<WithStreamedUnaryMethod_Lookup<WithSplitStreamingMethod_Execute<WithSplitStreamingMethod_Cancel<Service > > > > > > > StreamedService;
};

}  // namespace proto


#endif  // GRPC_matcher_2eproto__INCLUDED
